#version: '3.8'
services:
  postgresql:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: kiran
      POSTGRES_PASSWORD: kiran123
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    restart: unless-stopped


#docker setup for postgressql database
  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped





#docker setup for mangodp batabase
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    networks:
      - microservices-net
    environment:
      - MONGO_INITDB_ROOT_USERNAME=kiran
      - MONGO_INITDB_ROOT_PASSWORD=kiran123

  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    restart: always
    ports:
      - 8081:8081
    networks:
      - microservices-net
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=kiran
      - ME_CONFIG_MONGODB_ADMINPASSWORD=kiran123
      - ME_CONFIG_MONGODB_SERVER=mongo



  # Config Server
  config-server:
    container_name: config-server
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka



  discovery-server:
    container_name: discovery-server
    build:
      context: ./services/discovery-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservices-net
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    depends_on:
      - config-server




  product-service:
    container_name: product-server
    build:
      context: ./services/product-server
      dockerfile: Dockerfile
    ports:
      - "8050:8050"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ms_pg_sql:5432/product
      - SPRING_DATASOURCE_USERNAME=kiran
      - SPRING_DATASOURCE_PASSWORD=kiran123
#      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
    depends_on:
      - discovery-server
      - config-server
      - postgresql


  customer-service:
    container_name: customer-server
    build:
      context: ./services/customer-server
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - MONGODB_URI=mongodb://kiran:kiran123@mongo:27017/customer
#      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/customer
#      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
#    links:
#      - mongodb
    depends_on:
      - discovery-server
      - config-server
      - mongo



  order-service:
    container_name: order-service
    build:
      context: ./services/order-server
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ms_pg_sql:5432/order
      - SPRING_DATASOURCE_USERNAME=kiran
      - SPRING_DATASOURCE_PASSWORD=kiran123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=ms_kafka:29092
    #      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
    depends_on:
      - kafka
      - discovery-server
      - config-server
      - postgresql


  payment-service:
    container_name: payment-server
    build:
      context: ./services/payment-server
      dockerfile: Dockerfile
    ports:
      - "8060:8060"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ms_pg_sql:5432/payment
      - SPRING_DATASOURCE_USERNAME=kiran
      - SPRING_DATASOURCE_PASSWORD=kiran123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=ms_kafka:29092
#      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
    depends_on:
      - kafka
      - discovery-server
      - config-server
      - postgresql



  notification-service:
    container_name: notification-server
    build:
      context: ./services/notification-server
      dockerfile: Dockerfile
    ports:
      - "8040:8040"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://discovery-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - MONGODB_URI=mongodb://kiran:kiran123@mongo:27017/notification
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=ms_kafka:29092
#      - SPRING_ZIPKIN_BASE_URL=http://zipkin:9411
    depends_on:
      - mail-dev
      - kafka
      - discovery-server
      - config-server
      - mongo



  api-gateway:
    container_name: api-gateway
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8222:8222"
    networks:
      - microservices-net
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
    depends_on:
      - discovery-server
      - config-server
      - keycloak



  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms_kafka:29092,PLAINTEXT_INTERNAL://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_INTERNAL://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - microservices-net





  mail-dev:
    container_name: ms-mail-dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025


#  zipkin:
#    container_name: zipkin
#    image: openzipkin/zipkin
#    ports:
#      - "9411:9411"
#    networks:
#      - microservices-net


  keycloak:
    container_name: keycloak-ms
    image: quay.io/keycloak/keycloak:24.0.2
    ports:
      - 9098:8080
    environment:
      KEYCLOAK_ADMIN: kiran
      KEYCLOAK_ADMIN_PASSWORD: kiran123
    networks:
      - microservices-net
    command:
     - "start-dev"


  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-net
#    depends_on:
#      - product-service
#      - inventory-service
#      - order-service
#      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - microservices-net


networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongo:
